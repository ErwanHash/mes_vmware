---
### VM PREP ###
- name: "PT I, VCENTER"
  hosts: localhost
  gather_facts: no
  connection: local
  become: yes
  vars_files: 
    - vars/main.yml
    - vars/users.yml
  tasks:

    - name: Add a portgroup
      vmware_portgroup:
        hosts: "{{ exsi_hosts }}"
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        switch: "{{ vSwitch_name }}"
        portgroup_name: "{{ vlan_name }}"
        vlan_id: "{{ vlan_id }}"
        validate_certs: no
        state: present
      tags: vcenter, network

# Add a tag with the user's name

    - name: Create a tag
      vmware_tag:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        category_id: "{{ tag_category_id }}"
        tag_name: "{{ tag_name }}"
        tag_description: "{{ tag_description }}"
        state: present
      tags: vm, tag

# Create the VM

    - name: Create a virtual machine from a template
      vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        datacenter: "{{ datacenter }}"
        folder: /
        name: "{{ vm_name }}"
        template: "{{ template_name }}"
        disk:
         - size_gb: "{{ disk_size }}"
           type: "{{ disk_type_default }}"
           autoselect_datastore: "{{ autoselect_datastore_default }}"
        wait_for_ip_address: "{{ wait_for_ip_address_default }}"
        state: poweredon
      register: vm_result
      tags: vm
  
# Add the previously created tag to the VM we just created

    - name: Add tag in "Proprio" category
      vmware_tag_manager:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        tag_names:
          - "{{ tag_name }}"
        state: add
        object_name: "{{ vm_name }}"
        object_type: VirtualMachine
      tags: vm, tag

# Prepare date's var

    - name: Get timestamp from the system
      shell: "date +%d-%m-%Y%H-%M-%S"
      register: tstamp
      tags: var
    
    - name : set variables
      set_fact:
        cur_date: "{{tstamp.stdout[0:10]}}"
      tags: var

# Add attributes to the VM

    - name: Add virtual machine custom attributes
      vmware_guest_custom_attributes:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        name: "{{ vm_name }}"
        state: present
        attributes:
          - name: DateCreation
            value: "{{cur_date}}"
      tags: vm, attributes
  
# Prepare VM'S OS UPDATE

    # - name: Upgrade vm compatibility
    #   vmware_guest:
    #     hostname: "{{ vcenter_hostname }}"
    #     username: "{{ vcenter_username }}"
    #     password: "{{ vcenter_password }}"
    #     validate_certs: "{{ validate_certs }}"
    #     name: "{{ vm_name }}"
    #     hardware:
    #       version: 14
    #   tags: vm, os

# Update the OS
    
    # - name: Update OS
    #   vmware_guest:
    #     hostname: "{{ vcenter_hostname }}"
    #     username: "{{ vcenter_username }}"
    #     password: "{{ vcenter_password }}"
    #     validate_certs: "{{ validate_certs }}"
    #     name: "{{ vm_name }}"
    #     guest_id: "{{ guest_id }}"
    #     state: present
    #   tags: vm, os

# Add a network interface

    - name: Add vmxnet3 (network interface)
      vmware_guest_network:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        datacenter : "{{ datacenter }}"
        name: "{{ vm_name }}"
        gather_network_info: true
        networks:
          - name: "VM Network"
            state: present
            device_type: vmxnet3
          - name: "VLAN_Erwan"
            state: present
            device_type: vmxnet3
      tags: vm, network

# Start the VM (if set to poweredoff when created)

    - name: Turn on the vm
      vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        wait_for_ip_address: true
        name: "{{ vm_name }}"
        state: poweredon
      tags: vm

# Create a fact for the VM's ip

    - name: Create the fact containing the VM's ipv4 adress
      set_fact:
        vm_ip: "{{ vm_result.instance.ipv4 }}"
      tags: always

    - debug:
        var: vm_ip

# Prepare SSH connection to VM

    - name: Add VM as host
      ansible.builtin.add_host:
        hostname: "{{ vm_ip }}"
        ansible_inventory: "{{ inventory }}"
        ansible_user: "{{ ansible_username }}"
        ansible_password: "{{ ansible_password }}"
        groups:
          - "{{ vm_group }}"
      tags: ssh

    - name: ssh key
      shell: "ssh-keyscan {{ vm_ip }} >> ~/.ssh/known_hosts"
      tags: ssh

# Create a snapshot

    - name: Create a snapshot
      vmware_guest_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        datacenter: "{{ datacenter }}"
        folder: "{{ folder_name }}"
        name: "{{ vm_name }}"
        memory_dump: yes
        quiesce: yes
        state: present
        snapshot_name: "{{ snapshot_name }}"
        description: Use it if anything goes wrong
      tags: vm, snapshot

### NOW WE WORK ON THE VM ###
- name: "PT II, VM"
  hosts: "{{ vm_group }}"
  gather_facts: no
  become: yes
  vars_files: 
    - vars/main.yml
    - vars/users.yml
  tasks:

    - name: Set authorized key taken from file
      ansible.posix.authorized_key:
        user: "{{ ansible_username }}"
        key: "{{ lookup('file', '{{ ssh_public_key_path }}') }}"
        validate_certs: "{{ validate_certs }}"
      tags: ssh
    
    # - name: Apt update
    #   apt:
    #     update-cache: yes
    #     cache_valid_time: 3600
    #   tags: os, update

    # - name: Install packages
    #   apt:
    #     name : "{{ packages }}"
    #     state: present
    #   tags: os, install

    # - name: Enable/Start apache2
    #   systemd:
    #     name: apache2
    #     enabled: true
    #     state: started
    #   tags: apache

### WHAT'S LEFT TO DO ###

    # - name: Enable/Start mariadb
    # - name: Create a database

    # - name: Wordpress dld
    #   shell: wget https://fr.wordpress.org/latest-fr_FR.zip

    # - name: Wordpress unzip
    #   shell: unarchive latest-fr_FR.zip -d /var/www/html

    # - name: Check that you can connect to a page and it returns a status 200
    #   uri:
    #     url: "{{ vm_ip }}"

### BACK TO LOCAL ###
- name: "PT III, BACK TO VCENTER"
  hosts: localhost
  gather_facts: no
  connection: local
  become: yes
  vars_files: 
    - vars/main.yml
    - vars/users.yml
  tasks:

# Remove the previously created snapshot

    - name: Remove our snapshot
      vmware_guest_snapshot:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ validate_certs }}"
        datacenter: "{{ datacenter }}"
        folder: "{{ folder_name }}"
        name: "{{ vm_name }}"
        memory_dump: yes
        quiesce: yes
        state: absent
        snapshot_name: "{{ snapshot_name }}"
      tags: vm, snapshot
...